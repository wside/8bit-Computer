0100100001100101   //"H" "e"                    //comments are allowed
0110110001101100   //"l" "l"             //this is the .data section
0110111101010111   //"o" "W"             
0110111101110010   //"o" "r"            //assembled by hand so
0110110001100100   //"l" "d"            //if using the assembler to reassmble change decimal values in commented
0000000000000000   //"\0" "\0"          //assembly lang commands to twos comp when necessary  
0000000011111101   //"\0" "-3"          
@100               //line = read_PC_controlable     //the .text section begins right below at  line 100 (hex)        
0011011111101000   //100     addi $0 55   (put 55 = 0x37 in the Acc)                 
xxxxxxxx11000100   //101     move $r0     ($r0 = 55) 
0110010011101000   //102     addi $0 100  (put 100 = 0x64 in the Acc) 
xxxxxxxx11000101   //103     move $r1     ($r1 = 100) 
xxxxxxxx10101100   //104     slt $r1 $r0  (if $r1<$r0 set a 1 on acc. 55 is not < 100 so Acc= 0)
xxxxxxxx11000110   //105     move $r2     ($r2 = 0)
0000001111101000   //106     addi $0 3    (put 3 in the Acc)
xxxxxxxx11000111   //107     move $r3     ($r3 = 3 because we want to branch +3 from the beq)
0000011111111110   //108     beq $r2 $0 00 $r3   ($r2 = $0 and concat 00 in front of $r3 get +3 so branch to line 10B)
xxxxxxxx00101100   //109     add $r1 $r0     (Acc = $r1 + $r0 = 100 + 55 = 155 = 0x9B)
xxxxxxxx11010011   //10A     jrra 011      (jump to $ra (The actual jrra command))
0101000011101000   //10B     addi $0 80    (put 80 = 0x50 in the Acc)
xxxxxxxx11001001   //10C     srl 1         (Acc = 80/(2^1) = 40 = 0x28)
xxxxxxxx11001010   //10D     srl 2         (Acc = 40/(2^2) = 10  = 0x0A)
xxxxxxxx01101100   //10E     nand $r1 $r0  (bitwise nand of $r1=55=00110111 and #r0=100=01100100 so Acc=11011011=0xDB) 
0000100111011001   //10F     jal 0x109     (jump and link to line 109) 
0001010111101000   //110     addi $0 21    (put 21 = 0x15 in the Acc)
xxxxxxxx11000100   //111     move $r0      ($r0 = 21)
1111111011101010   //112     addi $sp -2     ($sp original = 255 = 0xFF. Decrement $sp by 2, put in Acc)
xxxxxxxx11000010   //113     move $sp        ($sp now = 253 = 0xFD)         
xxxxxxxx11010101   //114     jrra 101        (syscall: print out all the regs)
0100000111100100   //115     sw $r0 $sp 1    (put contents of $r0 (=21) into line ($sp+1=254 dec= 0xFE))
0100000011100101   //116     sw $r1 $sp 0    (put contents of $r1 (=100) into line ($sp+0=253 dec)
0100000011110111   //117     lw $r3 $sp 0    (put contents of line ($sp+0=253) of stack into $r3. $r3 now = 100.)
0100000111110011   //118     lw $ra8 $sp 1   ($ra8 gets 21, $ra3 gets whatever 3 msb of line. Special control lines)
1000101111101110   //119     addi $r2 -117   (put -117 = 0x8B on Acc)
xxxxxxxx11000110   //11A     move $r2        ($r2 = -117)
xxxxxxxx10110000   //11B     slt $r2 $0      (-117 < 0 so set a 1 on Acc (demonstrates twos complement working))
0000001011101010   //11C     addi $sp 2      ($sp is returned to original (253+2=255))
xxxxxxxx11000010   //11D     move $sp        ($sp =255)
xxxxxxxx00111000   //11E     add $r3 $0      (Acc = $r3 = 100 dec)
xxxxxxxx11010100   //11F     jrra 100        (syscall: print out the Acc)
0000000011101000   //120     addi $0 0       (put starting address of string (= line 0) into Acc)
xxxxxxxx11010001   //121     jrra 001        (syscall: print string from data until \0 char. String = HelloWorld)
0000011011101000   //122     addi 6          (put starting address of integer (= line 6) into Acc)
xxxxxxxx11010010   //123     jrra 010        (syscall: Acc now = integer. Integer = -3)
xxxxxxxx11010101   //124     jrra 101        (syscall: print out all the regs)
xxxxxxxx11010100   //125     jrra 100        (syscall: print out the Acc (= -3))
xxxxxxxx11010110   //126     jrra 110        (syscall: *print stack from line 255 until hit x's. But line 255 can = x) 
xxxxxxxx11010000   //127     jrra 000        (syscall: exit. Doesn't necessarily have to be last line, but is here)
                                             //*note that print stack prints only lower 8 bits of each line